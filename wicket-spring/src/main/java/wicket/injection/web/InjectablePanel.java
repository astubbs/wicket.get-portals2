package wicket.injection.web;

import wicket.injection.ConfigurableInjector;
import wicket.markup.html.panel.Panel;
import wicket.model.IModel;

/**
 * Subclass of Panel that is injected via an injector in the InjectorHolder
 * 
 * Be careful not to initialize fields for your dependencies to null, otherwise
 * the initialization of the subclass will replace the field assigned by the
 * injector
 * 
 * For Example:
 * 
 * <pre>
 * // this is ok
 * @SpringBean
 * IDependency dependency;
 * 
 * // this is not ok, proxy generated by injector will be replaced
 * // with null when subclass initializes the field
 * @SpringBean
 * IDependency2 dependency2 = null;
 * </pre>
 * 
 * @author Igor Vaynberg (ivaynberg)
 * @deprecated with the introduction of
 *             {@link wicket.injection.ComponentInjector} you don't need to
 *             override from this class anymore, but can instead just override
 *             {@link wicket.markup.html.panel.Panel}.
 */
public class InjectablePanel extends Panel
{
	/**
	 * Constructor
	 * 
	 * @param id
	 *            component id
	 */
	public InjectablePanel(String id)
	{
		super(id);
		getInjector().inject(this);
	}

	/**
	 * Constructor
	 * 
	 * @param id
	 * @param model
	 */
	public InjectablePanel(String id, IModel model)
	{
		super(id, model);
		getInjector().inject(this);
	}

	private ConfigurableInjector getInjector()
	{
		ConfigurableInjector injector = InjectorHolder.getInjector();
		if (injector == null)
		{
			throw new RuntimeException("injector not set in InjectorHolder");
		}
		return injector;
	}
}
