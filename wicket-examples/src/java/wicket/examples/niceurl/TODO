Work in progress...

There's a couple of things that need to be fixed to
have path mounting (or nice urls) work really nice:

1) The disadvantage of working with paths is that all images, stylesheets etc
	get messed up. I think we could and should provide some magic to fix this
	transparently. Something like a filter that post-processes generated HTML
	(not only components as there might be a bunch of non-component tags too)
	and that prepends all relative (not starting with /) href, src, ... attributes
	with the context path. This <img src="hi.gif" /> would be
	<img src="/mycontext/hi.gif" />
	
	Juergen, if you are reading this... would this be doable? See any problems
	with it?
	
	Igor> possibly use html's base tag to avoid having to rewrite urls in a
	      post processing step.

	Eelco> you still have to know the web context name for that to work, right?

    Igor> no, you can get that out of the http servlet request
    
    Eelco> Erm. I meant the servlet path :)
    
	Igor> see the attached base component below, it reconstructs the entire path.
		  specifically the buildBaseHref() function.

	Eelco> Yep, I understand that you can do it like this. My point was that you can't use the
			base tag without anything extra - like using a Wicket component
			
	Eelco> Is this an alternative to the dev list? :)

	Igor> You started it!
	
	Juergen> Fixed. NiceUrlApplication adds a PrependContextPathHandler (IMarkupFilter)
	         to the application
	
2) Though we have the basic mounting working now, the next neat thing on the list
	is to be able to partition our applications in paths. I think we can quite
	elegantly map this to page maps. I am thinking in the lines of being able
	to mount a page map to a path (e.g. /mymap) so that everything in that page
	map will have that path part in it. E.g. you could have urls that look like:
	http://localhost:8080/wicket-examples/navomatic/mypagemap/?bookmarkablePage=wicket.examples.navomatic.Page2
	or http://localhost:8080/wicket-examples/navomatic/my2ndpagemap/my/page/param1/value1
	Urls like that gives users extra options to integrate with 'legacy' techniques
	like some authorization packages.
	
3) The reference back to index.html needs to be fixed; related to 2).
  
    Juergen> Fixed. PrependContextPathHandler solves this problem as well


- Eelco

==============================================================

**
 * Base tag that makes sure all links with relative paths are relative to the context root
 * 
 * @author Igor Vaynberg (ivaynberg)
 */
public class BaseTag extends WebComponent {

    public BaseTag(String id) {
        super(id);
    }
   
    @Override
    protected void onComponentTag(ComponentTag tag) {
        checkComponentTag(tag, "base");
        String href=buildBaseHref();
        tag.put("href", href);
    }
   
    private String buildBaseHref() {
        RequestCycle cycle=getRequestCycle();
        ServletWebRequest request=(ServletWebRequest) cycle.getRequest();
        HttpServletRequest req=request.getHttpServletRequest();
       
        StringBuffer href = new StringBuffer();

        String scheme = req.getScheme();

        href.append(scheme);
        href.append("://");
        href.append(req.getServerName());

        if(req.getServerPort()!=80) {       
            href.append(":");
            href.append(req.getServerPort());
        }
        href.append(req.getContextPath());
        href.append("/");
       
        return href.toString();
    }
}