package wicket.examples.ajax.builtin;

import java.util.TimeZone;

import wicket.ajax.AjaxRequestTarget;
import wicket.ajax.AjaxTimerBehavior;
import wicket.behavior.MarkupIdSetter;

/**
 * A world clock example page. Demonstrates timer behavior as well as multiple
 * component update.
 * 
 * @author Igor Vaynberg (ivaynberg)
 * 
 */
public class WorldClockPage extends BasePage
{
	/**
	 * Constructor
	 */
	public WorldClockPage()
	{
		// create clock components for different timezones
		final Clock la = new Clock("la", TimeZone.getTimeZone("America/Los_Angeles"));
		final Clock ny = new Clock("ny", TimeZone.getTimeZone("America/New_York"));
		final Clock moscow = new Clock("moscow", TimeZone.getTimeZone("Europe/Moscow"));
		final Clock prague = new Clock("prague", TimeZone.getTimeZone("Europe/Prague"));
		final Clock london = new Clock("london", TimeZone.getTimeZone("Europe/London"));

		// add the components to the container and add a markup id setter to
		// each component. markup id setter makes sure the markup contains an id
		// attribute ( either the one specified in a markup or a unique value
		// generated by wicket )
		add(la.add(MarkupIdSetter.INSTANCE));
		add(ny.add(MarkupIdSetter.INSTANCE));
		add(moscow.add(MarkupIdSetter.INSTANCE));
		add(prague.add(MarkupIdSetter.INSTANCE));
		add(london.add(MarkupIdSetter.INSTANCE));

		// add the timer behavior to the la component and make it update all
		// other components as well
		la.add(new AjaxTimerBehavior(5000)
		{

			protected void onTimer(AjaxRequestTarget target)
			{
				target.addComponent(la);
				target.addComponent(ny);
				target.addComponent(moscow);
				target.addComponent(prague);
				target.addComponent(london);
			}

		});
	}
}
