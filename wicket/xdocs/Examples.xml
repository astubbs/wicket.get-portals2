<?xml version="1.0"?>
<document>
  <properties>
    <title>Examples</title>
  </properties>

  <meta name="keyword" content="wicket, web, j2ee, java"/>

<body>
<section name="A few quick Wicket examples">
<p>
Nothing says more about a development technology than a few simple usage examples.  
After all, how hard should it be to do something easy? 
The examples below should speak for themselves in demonstrating how easy it is to get 
things done in Wicket when compared to other frameworks. 
The 'Swingy' nature of Wicket is quickly revealed as well as "low touch" approach to HTML markup.
</p>
</section>
<section name="HelloWorld">
<p>
HelloWorld demonstrates the basic structure of a web application in Wicket.
A Label component is used to display a message on the home page for the application.
</p>
<img src="images/image001.png" alt="HelloWorld"/>
<subsection name="HelloWorldApplication.java">
<source><![CDATA[
public class HelloWorldApplication extends WebApplication
{
    public HelloWorldApplication()
    {
        getSettings().setHomePage(HelloWorld.class);
    }
}]]></source>
</subsection>
<subsection name="HelloWorld.java">
<source><![CDATA[
public class HelloWorld extends HtmlPage
{
    public HelloWorld(final PageParameters parameters)
    {
        add(new Label("message", "Hello world!"));
    }
}]]>
</source>
</subsection>
<subsection name="HelloWorld.html">
<source><![CDATA[
<html>
<body>
    <span componentName = "message"/>
</body>
</html>]]>
</source>
</subsection>
</section>
<section name="Images">
<p>
The Images application shows how to display a static image, a localized image resource (that can be included in 
a component JAR file) and a dynamically created image (using headless AWT).
</p>
<img src="images/image002.png" alt="Images"/>
<subsection name="ImagesApplication.java">
<source><![CDATA[
public class ImagesApplication extends WebApplication
{
    public ImagesApplication()
    {
        getSettings().setHomePage(Home.class);
    }
}]]>
</source>
</subsection>
<subsection name="Home.java"><source><![CDATA[
public final class Home extends HtmlPage
{
    public Home(final PageParameters parameters)
    {
        // Image as package resource
        add(new Image("image2"));

        // Dynamically created image
        final BufferedImage circle = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
        circle.getGraphics().drawOval(0, 0, 100, 100);
        add(new DynamicImage("image3").setExtension("jpeg").setImage(circle));
    }
}]]>
</source>
</subsection>
<subsection name="Home.html">
<source><![CDATA[
<html>
<body>
    <img src = "Image1.gif">
    <img componentName = "image2" src = "Image2.gif">
    <img componentName = "image3">
</body>
</html>]]>
</source>
</subsection>
</section>

<section name="Navomatic">
<p>
The Navomatic application uses border components and links to create a navigation component that 
can easily be dropped into any web page.  The link in the navigation to the current page is 
automatically turned into italic text to indicate to the user what page they are on.  The first 
screen capture shows the Page1 page and the second shows the Page2 page that you arrive at if you 
click on the Page1 link.
</p>
<img src="images/image003.png" alt="Navomatic1" /><br />
<img src="images/image004.jpg" alt="Navomatic2" />

<subsection name="NavomaticApplication.java">
<source><![CDATA[
public class NavomaticApplication extends WebApplication
{
    public NavomaticApplication()
    {
        getSettings().setHomePage(Page1.class);
    }
}]]>
</source>
</subsection>
<subsection name="Page1.java">
<source><![CDATA[
public class Page1 extends HtmlPage
{
    public Page1(PageParameters parameters)
    {
        add(new NavomaticBorder("navomaticBorder"));
    }
}]]>
</source>
</subsection>
<subsection name="Page1.html">
<source><![CDATA[
<html>
<body>
 
    <span componentName = "navomaticBorder">
 
    You are viewing Page1
 
    </span>
   
</body>
</html>]]>
</source>
</subsection>
<subsection name="Page2.java">
<source><![CDATA[
public class Page2 extends HtmlPage
{
    public Page2(PageParameters parameters)
    {
        add(new NavomaticBorder("navomaticBorder"));
    }
}]]>
</source>
</subsection>
<subsection name="Page2.html">
<source><![CDATA[
<html>
<body>
 
    <span componentName = "navomaticBorder">
 
    You are viewing Page2
 
    </span>
   
</body>
</html>]]>
</source>
</subsection>
<subsection name="NavomaticBorder.java">
<source><![CDATA[
public class NavomaticBorder extends Border
{
    /**
     * Constructor
     * @param componentName The name of this component
     */
    public NavomaticBorder(final String componentName)
    {
        super(componentName);
        add(new BoxBorder("boxBorder"));
        add(new BoxBorder("boxBorder2"));
    }
}]]>
</source>
</subsection>
<subsection name="NavomaticBorder.html">
<source><![CDATA[
<html>
<body>
    <span componentName = "[border]">
        <h1>Welcome to Navomatic!</h1>
        <p>
        <table>
            <tr>
                <td>
                    <span componentName = "boxBorder">
                        <b>Navigation Links</b><p>
                        <a componentName = "[autolink]" href = "Page1.html">Page1</a><br>
                        <a componentName = "[autolink]" href = "Page2.html">Page2</a><br>
                        <a componentName = "[autolink]" href = "Page3.html">Page3</a>
                    </span>
                </td>
                <td>
                    <span componentName = "boxBorder2">
                        <span componentName = "[children]"/>
                    </span>
                </td>
            </tr>
        </table>
        <p>
        <i><font size = "-1">Copyright (C) 2004, Jonathan Locke. All Rights Reserved.</font></i>
    </span>
 </body>
</html>]]>
</source>
</subsection>
</section>

<section name="Tables">
<p>
A quick teaser here that shows what Tables look like in Wicket.  The GuestBook example in the 
Wicket SDK has a form that allows users to enter comments.  It draws its list of comments in 
a table and shows how easy it is to do that.  What's more, tables automatically support structural 
modifications such as move up/down links and remove links.  In doing this, the dreaded "back button" 
problem is automatically and transparently dealt with by Wicket.
</p>
<img src="images/image005.png" alt="Tables"/>
<subsection name="GuestBook.java">
<source><![CDATA[
public class GuestBook extends HtmlPage
{
    public GuestBook(final PageParameters parameters)
    {
        // Add comment form
        add(new CommentForm("commentForm"));
 
        // Add table of existing comments
        add(new Table("comments", commentList)
        {
            public void populateCell(final Cell cell)
            {
                final Comment comment = (Comment)cell.getModel();
                cell.add(new Label("date", comment.getDate()));
                cell.add(new MultiLineLabel("text", comment.getText()));
            }  
        });
    }
    /* ... */
}]]>
</source>
</subsection>
<subsection name="GuestBook.html">
<source><![CDATA[
<html>
<body>
  <form componentName = "commentForm">
    Add your comment here:
    <p>
    <textarea componentName = "text">This is a comment</textarea>
    <p>
    <input type = "submit" value = "Submit"/>
  </form>
  <p>
  <span componentName = "comments">
      <p>
          <span componentName = "date">1/1/2004</span><br>
          <span componentName = "text">Comment text goes here.</span>
      </p>
  </span>
</body>
</html>]]>
</source>
</subsection>
</section>

</body>
</document>