/*
 * $Id$
 * $Revision$ $Date$
 * 
 * ==============================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package wicket.markup.html.image.resource;

import java.io.Serializable;
import java.util.Locale;

import wicket.Application;
import wicket.Component;
import wicket.IResourceFactory;
import wicket.IResourceListener;
import wicket.SharedResource;
import wicket.Resource;
import wicket.WicketRuntimeException;
import wicket.markup.ComponentTag;
import wicket.util.parse.metapattern.Group;
import wicket.util.parse.metapattern.MetaPattern;
import wicket.util.parse.metapattern.OptionalMetaPattern;
import wicket.util.parse.metapattern.parsers.MetaPatternParser;
import wicket.util.string.Strings;

/**
 * This class contains the logic for extracting static image resources
 * referenced by the src attribute of component tags and keeping these static
 * image resources in sync with the component locale.
 * 
 * @author Jonathan Locke
 */
public class LocalizedImageResource implements Serializable, IResourceListener
{
	/** Serial Version ID */
	private static final long serialVersionUID = 5934721258765771884L;

	/** The component that is referencing this image resource */
	private Component component;

	/** The locale of the image resource */
	private Locale locale;

	/** The image resource this image component references */
	private Resource resource;

	/** The style of the image resource */
	private String style;
	
	/** True if the resource was generated by a factory */
	private boolean isFactoryResource;

	/**
	 * Parses image value specifications of the form "[factoryName]:
	 * [shared-image-name]?:[specification]"
	 * 
	 * @author Jonathan Locke
	 */
	private static final class ImageValueParser extends MetaPatternParser
	{
		/** Factory name */
		private static final Group factoryName = new Group(MetaPattern.VARIABLE_NAME);

		/** Image name */
		private static final Group imageName = new Group(MetaPattern.VARIABLE_NAME);

		/** Factory name */
		private static final Group specification = new Group(MetaPattern.ANYTHING_NON_EMPTY);

		/** Meta pattern. */
		private static final MetaPattern pattern = new MetaPattern(new MetaPattern[] { factoryName,
				MetaPattern.COLON, new OptionalMetaPattern(new MetaPattern[] { imageName }),
				MetaPattern.COLON, specification });

		/**
		 * Construct.
		 * 
		 * @param input
		 *            to parse
		 */
		private ImageValueParser(final CharSequence input)
		{
			super(pattern, input);
		}

		/**
		 * @return The factory name
		 */
		private String getFactoryName()
		{
			return factoryName.get(matcher());
		}

		/**
		 * @return Returns the imageName.
		 */
		private String getImageName()
		{
			return imageName.get(matcher());
		}

		/**
		 * @return Returns the specification.
		 */
		private String getSpecification()
		{
			return specification.get(matcher());
		}
	}

	/**
	 * Constructor
	 * 
	 * @param component
	 *            The component that owns this localized image resource
	 */
	public LocalizedImageResource(final Component component)
	{
		this.component = component;
	}

	/**
	 * @param tag
	 *            The tag to inspect for an optional src attribute that might
	 *            reference an image.
	 * @throws WicketRuntimeException
	 *             Thrown if an image is required by the caller, but none can be
	 *             found.
	 */
	public void loadImageResource(final ComponentTag tag)
	{
		// If locale has changed from the initial locale used to attach image
		// resource, then we need to reload the resource in the new locale
		if ((locale != null && locale != component.getLocale())
				|| (style != null && style.equals(component.getStyle())))
		{
			if (resource instanceof SharedResource)
			{
				if (isFactoryResource)
				{
					this.resource = null;
				}
				else
				{
					// Change the locale and style for the named resource so it will rebind
					final SharedResource namedResource = (SharedResource)resource;
					namedResource.setLocale(locale);
					namedResource.setStyle(style);					
				}
			}
			else
			{
				this.resource = null;
			}
		}

		// Need to load image resource for this component?
		if (resource == null)
		{
			// Get model string
			final String modelString = component.getModelObjectAsString();

			// If model string is empty, use src attribute of tag
			final String resourcePath;
			if (Strings.isEmpty(modelString))
			{
				resourcePath = tag.getString("src");
			}
			else
			{
				resourcePath = modelString;
			}

			// If we found a resource path, try to load the image resource
			if (!Strings.isEmpty(resourcePath))
			{
				final Package basePackage = component.findParentWithAssociatedMarkup().getClass()
						.getPackage();
				this.resource = StaticImageResource.get(basePackage, resourcePath, component
						.getLocale(), component.getStyle());
			}

			// If we can't get a static image and one isn't already assigned
			if (resource == null)
			{
				// Create image using factory
				this.resource = newImageResource(tag);
				this.isFactoryResource = true;
			}

			// Save component's locale and style so we can detect changes later
			this.locale = component.getLocale();
			this.style = component.getStyle();
		}
	}

	/**
	 * @see wicket.IResourceListener#onResourceRequested()
	 */
	public void onResourceRequested()
	{
		resource.onResourceRequested();
	}

	/**
	 * @param resource
	 *            The resource to set.
	 */
	public void setResource(final Resource resource)
	{
		this.resource = resource;
	}

	/**
	 * Generates an image resource based on the attribute values on tag
	 * 
	 * @param tag
	 *            The tag to look at
	 * @return The image resource
	 */
	private Resource newImageResource(final ComponentTag tag)
	{
		// Get value attribute
		String value = tag.getString("value");
		if (value == null)
		{
			throw new WicketRuntimeException(
					"Component was not assigned an ImageResource, and had neither a src "
							+ "attribute referencing a static image nor a value "
							+ "attribute from which to generate an image.");
		}
		else
		{
			// Parse value
			final ImageValueParser valueParser = new ImageValueParser(value);

			// Does value match parser?
			if (valueParser.matches())
			{
				// Look up factory
				final IResourceFactory factory = component.getApplication().getResourceFactory(
						valueParser.getFactoryName());

				// Found factory?
				if (factory == null)
				{
					throw new WicketRuntimeException("Could not find image resource factory named "
							+ valueParser.getFactoryName());
				}

				// Have factory create new image resource
				final ImageResource resource = (ImageResource)factory.newResource(valueParser
						.getSpecification(), locale, style);

				// Stash resource in application for sharing
				final String name = valueParser.getImageName();
				if (!Strings.isEmpty(name))
				{
					component.getApplication().addResource(name, resource);
					return new SharedResource(Application.class, name);
				}
				return resource;
			}
			else
			{
				throw new WicketRuntimeException(
						"Could not find or generate image for value attribute \""
								+ value
								+ "\".  Was expecting either a static image reference or a value attribute of the form \"[resourceFactoryName]:[sharedResourceName]?:[factorySpecification]\".");
			}
		}
	}
}
