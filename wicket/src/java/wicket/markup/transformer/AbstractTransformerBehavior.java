/*
 * $Id: AbstractTransformerBehavior.java,v 1.1 2006/01/14 17:37:55 jonathanlocke
 * Exp $ $Revision$ $Date$
 * 
 * ==============================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package wicket.markup.transformer;

import wicket.Component;
import wicket.RequestCycle;
import wicket.Response;
import wicket.WicketRuntimeException;
import wicket.behavior.AbstractBehavior;
import wicket.markup.ComponentTag;
import wicket.response.StringResponse;

/**
 * A IBehavior which can be added to any component. It allows to post-process
 * (transform) the markup generated by the component.
 * 
 * @see wicket.markup.transformer.AbstractOutputTransformerContainer
 * 
 * @author Juergen Donnerstag
 */
public abstract class AbstractTransformerBehavior extends AbstractBehavior implements ITransformer
{
	private static final long serialVersionUID = 1L;

	private Response webResponse;

	/**
	 * Construct.
	 */
	public AbstractTransformerBehavior()
	{
	}

	/**
	 * Create a new response object which is used to store the markup generated
	 * by the child objects.
	 * 
	 * @return Response object. Must not be null
	 */
	protected Response newResponse()
	{
		return new StringResponse();
	}

	/**
	 * @see wicket.behavior.IBehavior#onComponentTag(wicket.Component,
	 *      wicket.markup.ComponentTag)
	 */
	@Override
	public void onComponentTag(final Component component, final ComponentTag tag)
	{
		tag.put("xmlns:wicket", "http://wicket.sourceforge.net");

		final RequestCycle requestCycle = RequestCycle.get();

		// Temporarily replace the web response with a String response
		this.webResponse = requestCycle.getResponse();

		// Create a new response object
		final Response response = newResponse();
		if (response == null)
		{
			throw new IllegalStateException("newResponse() must not return null");
		}

		// and make it the current one
		requestCycle.setResponse(response);
	}

	/**
	 * @see wicket.behavior.AbstractBehavior#onRendered(wicket.Component)
	 */
	@Override
	public void onRendered(final Component component)
	{
		final RequestCycle requestCycle = RequestCycle.get();

		try
		{
			Response response = requestCycle.getResponse();

			// Tranform the data
			// TODO post 1.2 transform also just use a CharSequence param
			// instead of string
			CharSequence output = transform(component, response.toString());
			this.webResponse.write(output);
		}
		catch (Exception ex)
		{
			throw new WicketRuntimeException("Error while transforming the output: " + this, ex);
		}
		finally
		{
			// Restore the original response object
			requestCycle.setResponse(this.webResponse);
		}
	}

	/**
	 * @see wicket.behavior.AbstractBehavior#cleanup()
	 */
	@Override
	public void cleanup()
	{
		this.webResponse = null;
	}

	/**
	 * @see wicket.behavior.AbstractBehavior#onException(wicket.Component,
	 *      java.lang.RuntimeException)
	 */
	@Override
	public void onException(Component component, RuntimeException exception)
	{
		if (this.webResponse != null)
		{
			final RequestCycle requestCycle = RequestCycle.get();
			requestCycle.setResponse(this.webResponse);
		}
	}

	/**
	 * 
	 * @see wicket.markup.transformer.ITransformer#transform(wicket.Component,
	 *      java.lang.String)
	 */
	public abstract CharSequence transform(final Component component, final String output)
			throws Exception;
}
