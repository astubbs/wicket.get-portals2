/*
 * $Id: OutputTransformerContainer.java,v 1.1 2005/12/31 10:09:31 jdonnerstag
 * Exp $ $Revision$ $Date$
 * 
 * ==============================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package wicket.markup.outputTransformer;

import java.io.FileNotFoundException;
import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import wicket.model.IModel;
import wicket.util.resource.IResourceStream;

/**
 * This abstract container provides the means to post-process the markup
 * generated by its child components.
 * 
 * @author Juergen Donnerstag
 */
public class XsltOutputTransformerContainer extends AbstractOutputTransformerContainer
{
	private static final long serialVersionUID = 1L;

	/**
	 * Construct
	 * 
	 * @see wicket.Component#Component(String)
	 */
	public XsltOutputTransformerContainer(final String id)
	{
		super(id);
	}

	/**
	 * Construct
	 * 
	 * @see wicket.Component#Component(String, IModel)
	 */
	public XsltOutputTransformerContainer(final String id, final IModel model)
	{
		super(id, model);
	}

	/**
	 * 
	 * @see wicket.markup.outputTransformer.AbstractOutputTransformerContainer#transform(java.lang.String)
	 */
	protected String transform(final String output) throws Exception
	{
		String filepath = getParent().getClass().getPackage().getName().replace('.', '/') + "/" + getId();
		
		IResourceStream resourceStream = getApplication().getResourceStreamLocator().locate(
				getClass().getClassLoader(), 
				filepath, 
				getStyle(), 
				getLocale(), 
				getMarkupType());

		if (resourceStream == null)
		{
			throw new FileNotFoundException(
					"Unable to find XSLT resource for " + this.toString());
		}
		
		try
		{
			// 1. Instantiate a TransformerFactory.
			TransformerFactory tFactory = TransformerFactory.newInstance();
	
			// 2. Use the TransformerFactory to process the stylesheet Source and
			// generate a Transformer.
			Transformer transformer = tFactory.newTransformer(new StreamSource(resourceStream.getInputStream()));
	
			// 3. Use the Transformer to transform an XML Source and send the
			// output to a Result object.
			StringWriter writer = new StringWriter();
			transformer.transform(
					new StreamSource(new StringReader(output)), 
					new StreamResult(writer));

			return writer.toString();
		}
		finally
		{
			resourceStream.close();
		}
	}
}
